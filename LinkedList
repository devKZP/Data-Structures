// Node class representing each element in the list
class Node {
    constructor(data) {
        this.data = data;
        this.next = null;
    }
}

// LinkedList class with insertion methods
class LinkedList {
    constructor() {
        this.head = null;
        this.size = 0;
    }

    // Insert at the beginning
    insertFirst(data) {
        const newNode = new Node(data);
        newNode.next = this.head; 
        this.head = newNode;
        this.size++;
    }

    // Insert at the end
    insertLast(data) {
        const newNode = new Node(data);
        if (!this.head) {
            this.head = newNode;
        } else {
            let current = this.head;
            while (current.next) {
                current = current.next;
            }
            current.next = newNode;
        }
        this.size++;
    }

    // Insert at a specific index
    insertAt(data, index) {
        if (index < 0 || index > this.size) {
            console.log("Index out of bounds");
            return;
        }

        const newNode = new Node(data);

        // Insert at the beginning
        if (index === 0) {
            this.insertFirst(data);
            return; // Avoid double increment
        }

        let current = this.head;
        let previous;

        // Traverse to the node just before the insertion point
        for (let i = 0; i < index; i++) {
            previous = current;
            current = current.next;
        }

        // Insert the new node
        previous.next = newNode;
        newNode.next = current;

        this.size++;
    }

    // Print the list
    printList() {
        let current = this.head;
        while (current) {
            console.log(current.data);
            current = current.next;
        }
    }
}

// Example usage:
const ll = new LinkedList();
ll.insertFirst(50);     // List: 50
ll.insertLast(200);     // List: 50 -> 200
ll.insertAt(100, 1);    // List: 50 -> 100 -> 200
ll.insertAt(150, 2);    // List: 50 -> 100 -> 150 -> 200

ll.printList(); // Output: 50 100 150 200
